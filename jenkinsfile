pipeline {
    agent {
        label 'master-node'
    }
    stages {
        stage("Update repo master branch") {
            steps {
                git url: 'https://github.com/maxilian/swarm-microservice-demo-v1', branch: 'master'
                
            }
        }

        stage("Build web-vote-app") {
            steps {
                sh """
                    cd web-vote-app
                    docker build -t 172.18.100.71:5000/voteapps/web-vote-app:latest .
                    docker push 172.18.100.71:5000/voteapps/web-vote-app:latest
                """
            }

        }

        stage("Build results-app") {
            steps {
                sh """
                    cd results-app
                    docker build -t 172.18.100.71:5000/voteapps/results-app:latest .
                    docker push 172.18.100.71:5000/voteapps/results-app:latest
                """
            }

        }


        stage("Build vote-worker") {
            steps {
                sh """
                    cd vote-worker
                    docker build -t 172.18.100.71:5000/voteapps/vote-worker:latest .
                    docker push 172.18.100.71:5000/voteapps/vote-worker:latest
                    
                """
            }

        }

        stage("Deploy web-vote-app and redis to worker node")
        {
            steps {
                sh '''
                    ls -al
                    if [ ! "$(docker service ps redis01)" ]; then
                        docker service create \
                        --name redis01 \
                        --network test-network \
                        --replicas 1 \
                        
                        --constraint node.hostname!=test-71 \
                        --detach redis:3
                    else 
                        docker service update \
                        --replicas 1 \
                        --constraint-add node.hostname!=test-71 \
                        --image redis:3 \
                        --detach redis01
                    fi

                    if [ ! "$(docker service ps redis02)" ]; then
                        docker service create \
                        --name redis02 \
                        --network test-network \
                        --replicas 1 \
                        --constraint node.hostname!=test-71 \
                        --detach redis:3
                    else 
                        docker service update \
                        --replicas 1 \
                        --constraint-add node.hostname!=test-71 \
                        --image redis:3 \
                        --detach redis02
                    fi
                    

                    if [ ! "$(docker service ps frontend01)" ]; then
                       docker service create \
                        --name frontend01 \
                        --network test-network \
                        --replicas 2 \
                        --publish 4000:80 \
                        --constraint node.hostname!=test-71 \
                        --env WEB_VOTE_NUMBER='01' \
                        --detach 172.18.100.71:5000/voteapps/web-vote-app:latest
                    else 
                       docker service rm frontend01
                       docker service create \
                        --name frontend01 \
                        --network test-network \
                        --replicas 2 \
                        --publish 4000:80 \
                        --constraint node.hostname!=test-71 \
                        --env WEB_VOTE_NUMBER='01' \
                        --detach 172.18.100.71:5000/voteapps/web-vote-app:latest
                    fi
                    
                '''
            }
        }

        stage("Deploy postgresql as DB") {

            steps {
                sh '''
                if [ ! "$(docker service ps store)" ]; then
                    docker service create \
                    --constraint node.hostname==test-71 \
                    --name store \
                    --env POSTGRES_PASSWORD=pg8675309 \
                    --network test-network  \
                    --publish 5432:5432 \
                    --detach postgres:9.1
                else
                    docker service rm store
                    docker service create \
                    --constraint node.hostname==test-71 \
                    --name store \
                    --env POSTGRES_PASSWORD=pg8675309 \
                    --network test-network  \
                    --publish 5432:5432 \
                    --detach postgres:9.1
                fi
                '''
            }
        }

        stage("Deploy vote-worker") {

            steps {
                sh '''

                 if [ ! "$(docker service ps vote-worker)" ]; then
                    docker service create \
                    --constraint node.hostname==test-71 \
                    --name vote-worker \
                    --env WORKER_NUMBER="01" \
                    --env FROM_REDIS_HOST=1 \
                    --env TO_REDIS_HOST=2 \
                    --network test-network  \
                    --detach 172.18.100.71:5000/voteapps/vote-worker:latest
                else
                    docker service rm vote-worker
                    docker service create \
                    --constraint node.hostname==test-71 \
                    --name vote-worker \
                    --env WORKER_NUMBER="01" \
                    --env FROM_REDIS_HOST=1 \
                    --env TO_REDIS_HOST=2 \
                    --network test-network  \
                    --detach 172.18.100.71:5000/voteapps/vote-worker:latest
                fi

                '''
            }
        }

        stage("Deploy results-app") {

            steps {
                sh '''

                 if [ ! "$(docker service ps results-app)" ]; then
                    docker service create \
                    --constraint node.hostname==test-71 \
                    --name results-app \
                    --publish 8089:80 \
                    --network test-network  \
                    --detach 172.18.100.71:5000/voteapps/results-app:latest
                else
                    docker service rm results-app
                    docker service create \
                    --constraint node.hostname==test-71 \
                    --name results-app \
                    --publish 8089:80 \
                    --network test-network  \
                    --detach 172.18.100.71:5000/voteapps/results-app:latest
                fi

                '''
            }
        }

        
    }
}